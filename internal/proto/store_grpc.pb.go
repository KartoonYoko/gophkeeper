// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: proto/store.proto

package proto

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StoreService_SaveData_FullMethodName        = "/proto.StoreService/SaveData"
	StoreService_UpdateData_FullMethodName      = "/proto.StoreService/UpdateData"
	StoreService_RemoveData_FullMethodName      = "/proto.StoreService/RemoveData"
	StoreService_GetDataByID_FullMethodName     = "/proto.StoreService/GetDataByID"
	StoreService_GetMetaDataList_FullMethodName = "/proto.StoreService/GetMetaDataList"
)

// StoreServiceClient is the client API for StoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StoreServiceClient interface {
	SaveData(ctx context.Context, in *SaveDataRequest, opts ...grpc.CallOption) (*SaveDataResponse, error)
	UpdateData(ctx context.Context, in *UpdateDataRequest, opts ...grpc.CallOption) (*UpdateDataResponse, error)
	RemoveData(ctx context.Context, in *RemoveDataRequest, opts ...grpc.CallOption) (*RemoveDataResponse, error)
	GetDataByID(ctx context.Context, in *GetDataByIDRequest, opts ...grpc.CallOption) (*GetDataByIDResponse, error)
	GetMetaDataList(ctx context.Context, in *GetMetaDataListRequest, opts ...grpc.CallOption) (*GetMetaDataListResponse, error)
}

type storeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStoreServiceClient(cc grpc.ClientConnInterface) StoreServiceClient {
	return &storeServiceClient{cc}
}

func (c *storeServiceClient) SaveData(ctx context.Context, in *SaveDataRequest, opts ...grpc.CallOption) (*SaveDataResponse, error) {
	out := new(SaveDataResponse)
	err := c.cc.Invoke(ctx, StoreService_SaveData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) UpdateData(ctx context.Context, in *UpdateDataRequest, opts ...grpc.CallOption) (*UpdateDataResponse, error) {
	out := new(UpdateDataResponse)
	err := c.cc.Invoke(ctx, StoreService_UpdateData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) RemoveData(ctx context.Context, in *RemoveDataRequest, opts ...grpc.CallOption) (*RemoveDataResponse, error) {
	out := new(RemoveDataResponse)
	err := c.cc.Invoke(ctx, StoreService_RemoveData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) GetDataByID(ctx context.Context, in *GetDataByIDRequest, opts ...grpc.CallOption) (*GetDataByIDResponse, error) {
	out := new(GetDataByIDResponse)
	err := c.cc.Invoke(ctx, StoreService_GetDataByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) GetMetaDataList(ctx context.Context, in *GetMetaDataListRequest, opts ...grpc.CallOption) (*GetMetaDataListResponse, error) {
	out := new(GetMetaDataListResponse)
	err := c.cc.Invoke(ctx, StoreService_GetMetaDataList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StoreServiceServer is the server API for StoreService service.
// All implementations must embed UnimplementedStoreServiceServer
// for forward compatibility
type StoreServiceServer interface {
	SaveData(context.Context, *SaveDataRequest) (*SaveDataResponse, error)
	UpdateData(context.Context, *UpdateDataRequest) (*UpdateDataResponse, error)
	RemoveData(context.Context, *RemoveDataRequest) (*RemoveDataResponse, error)
	GetDataByID(context.Context, *GetDataByIDRequest) (*GetDataByIDResponse, error)
	GetMetaDataList(context.Context, *GetMetaDataListRequest) (*GetMetaDataListResponse, error)
	mustEmbedUnimplementedStoreServiceServer()
}

// UnimplementedStoreServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStoreServiceServer struct {
}

func (UnimplementedStoreServiceServer) SaveData(context.Context, *SaveDataRequest) (*SaveDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveData not implemented")
}
func (UnimplementedStoreServiceServer) UpdateData(context.Context, *UpdateDataRequest) (*UpdateDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateData not implemented")
}
func (UnimplementedStoreServiceServer) RemoveData(context.Context, *RemoveDataRequest) (*RemoveDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveData not implemented")
}
func (UnimplementedStoreServiceServer) GetDataByID(context.Context, *GetDataByIDRequest) (*GetDataByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataByID not implemented")
}
func (UnimplementedStoreServiceServer) GetMetaDataList(context.Context, *GetMetaDataListRequest) (*GetMetaDataListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetaDataList not implemented")
}
func (UnimplementedStoreServiceServer) mustEmbedUnimplementedStoreServiceServer() {}

// UnsafeStoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StoreServiceServer will
// result in compilation errors.
type UnsafeStoreServiceServer interface {
	mustEmbedUnimplementedStoreServiceServer()
}

func RegisterStoreServiceServer(s grpc.ServiceRegistrar, srv StoreServiceServer) {
	s.RegisterService(&StoreService_ServiceDesc, srv)
}

func _StoreService_SaveData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).SaveData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreService_SaveData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).SaveData(ctx, req.(*SaveDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_UpdateData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).UpdateData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreService_UpdateData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).UpdateData(ctx, req.(*UpdateDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_RemoveData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).RemoveData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreService_RemoveData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).RemoveData(ctx, req.(*RemoveDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_GetDataByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).GetDataByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreService_GetDataByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).GetDataByID(ctx, req.(*GetDataByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_GetMetaDataList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetaDataListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).GetMetaDataList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreService_GetMetaDataList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).GetMetaDataList(ctx, req.(*GetMetaDataListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StoreService_ServiceDesc is the grpc.ServiceDesc for StoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.StoreService",
	HandlerType: (*StoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveData",
			Handler:    _StoreService_SaveData_Handler,
		},
		{
			MethodName: "UpdateData",
			Handler:    _StoreService_UpdateData_Handler,
		},
		{
			MethodName: "RemoveData",
			Handler:    _StoreService_RemoveData_Handler,
		},
		{
			MethodName: "GetDataByID",
			Handler:    _StoreService_GetDataByID_Handler,
		},
		{
			MethodName: "GetMetaDataList",
			Handler:    _StoreService_GetMetaDataList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/store.proto",
}
