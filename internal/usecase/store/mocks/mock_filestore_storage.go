// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KartoonYoko/gophkeeper/internal/usecase/store (interfaces: FileStorager)
//
// Generated by this command:
//
//	mockgen --destination=internal/usecase/store/mocks/mock_filestore_storage.go --package=mocks github.com/KartoonYoko/gophkeeper/internal/usecase/store FileStorager
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	filestore "github.com/KartoonYoko/gophkeeper/internal/storage/model/filestore"
	gomock "go.uber.org/mock/gomock"
)

// MockFileStorager is a mock of FileStorager interface.
type MockFileStorager struct {
	ctrl     *gomock.Controller
	recorder *MockFileStoragerMockRecorder
}

// MockFileStoragerMockRecorder is the mock recorder for MockFileStorager.
type MockFileStoragerMockRecorder struct {
	mock *MockFileStorager
}

// NewMockFileStorager creates a new mock instance.
func NewMockFileStorager(ctrl *gomock.Controller) *MockFileStorager {
	mock := &MockFileStorager{ctrl: ctrl}
	mock.recorder = &MockFileStoragerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileStorager) EXPECT() *MockFileStoragerMockRecorder {
	return m.recorder
}

// GetDataByID mocks base method.
func (m *MockFileStorager) GetDataByID(arg0 context.Context, arg1 *filestore.GetDataByIDRequestModel) (*filestore.GetDataByIDResponseModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataByID", arg0, arg1)
	ret0, _ := ret[0].(*filestore.GetDataByIDResponseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataByID indicates an expected call of GetDataByID.
func (mr *MockFileStoragerMockRecorder) GetDataByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataByID", reflect.TypeOf((*MockFileStorager)(nil).GetDataByID), arg0, arg1)
}

// RemoveDataByID mocks base method.
func (m *MockFileStorager) RemoveDataByID(arg0 context.Context, arg1 *filestore.RemoveDataByIDRequestModel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveDataByID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveDataByID indicates an expected call of RemoveDataByID.
func (mr *MockFileStoragerMockRecorder) RemoveDataByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveDataByID", reflect.TypeOf((*MockFileStorager)(nil).RemoveDataByID), arg0, arg1)
}

// SaveData mocks base method.
func (m *MockFileStorager) SaveData(arg0 context.Context, arg1 *filestore.SaveDataRequestModel) (*filestore.SaveDataResponseModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveData", arg0, arg1)
	ret0, _ := ret[0].(*filestore.SaveDataResponseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveData indicates an expected call of SaveData.
func (mr *MockFileStoragerMockRecorder) SaveData(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveData", reflect.TypeOf((*MockFileStorager)(nil).SaveData), arg0, arg1)
}

// UpdateData mocks base method.
func (m *MockFileStorager) UpdateData(arg0 context.Context, arg1 *filestore.UpdateDataRequestModel) (*filestore.UpdateDataResponseModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateData", arg0, arg1)
	ret0, _ := ret[0].(*filestore.UpdateDataResponseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateData indicates an expected call of UpdateData.
func (mr *MockFileStoragerMockRecorder) UpdateData(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateData", reflect.TypeOf((*MockFileStorager)(nil).UpdateData), arg0, arg1)
}
