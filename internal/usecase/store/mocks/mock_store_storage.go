// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KartoonYoko/gophkeeper/internal/usecase/store (interfaces: Storager)
//
// Generated by this command:
//
//	mockgen --destination=internal/usecase/store/mocks/mock_store_storage.go --package=mocks github.com/KartoonYoko/gophkeeper/internal/usecase/store Storager
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	store "github.com/KartoonYoko/gophkeeper/internal/storage/model/store"
	gomock "go.uber.org/mock/gomock"
)

// MockStorager is a mock of Storager interface.
type MockStorager struct {
	ctrl     *gomock.Controller
	recorder *MockStoragerMockRecorder
}

// MockStoragerMockRecorder is the mock recorder for MockStorager.
type MockStoragerMockRecorder struct {
	mock *MockStorager
}

// NewMockStorager creates a new mock instance.
func NewMockStorager(ctrl *gomock.Controller) *MockStorager {
	mock := &MockStorager{ctrl: ctrl}
	mock.recorder = &MockStoragerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorager) EXPECT() *MockStoragerMockRecorder {
	return m.recorder
}

// GetDataByID mocks base method.
func (m *MockStorager) GetDataByID(arg0 context.Context, arg1 *store.GetDataByIDRequestModel) (*store.GetDataByIDResponseModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataByID", arg0, arg1)
	ret0, _ := ret[0].(*store.GetDataByIDResponseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataByID indicates an expected call of GetDataByID.
func (mr *MockStoragerMockRecorder) GetDataByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataByID", reflect.TypeOf((*MockStorager)(nil).GetDataByID), arg0, arg1)
}

// GetUserDataList mocks base method.
func (m *MockStorager) GetUserDataList(arg0 context.Context, arg1 *store.GetUserDataListRequestModel) (*store.GetUserDataListResponseModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserDataList", arg0, arg1)
	ret0, _ := ret[0].(*store.GetUserDataListResponseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserDataList indicates an expected call of GetUserDataList.
func (mr *MockStoragerMockRecorder) GetUserDataList(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserDataList", reflect.TypeOf((*MockStorager)(nil).GetUserDataList), arg0, arg1)
}

// RemoveDataByID mocks base method.
func (m *MockStorager) RemoveDataByID(arg0 context.Context, arg1 *store.RemoveDataByIDRequestModel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveDataByID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveDataByID indicates an expected call of RemoveDataByID.
func (mr *MockStoragerMockRecorder) RemoveDataByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveDataByID", reflect.TypeOf((*MockStorager)(nil).RemoveDataByID), arg0, arg1)
}

// SaveData mocks base method.
func (m *MockStorager) SaveData(arg0 context.Context, arg1 *store.SaveDataRequestModel) (*store.SaveDataResponseModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveData", arg0, arg1)
	ret0, _ := ret[0].(*store.SaveDataResponseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveData indicates an expected call of SaveData.
func (mr *MockStoragerMockRecorder) SaveData(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveData", reflect.TypeOf((*MockStorager)(nil).SaveData), arg0, arg1)
}

// UpdateData mocks base method.
func (m *MockStorager) UpdateData(arg0 context.Context, arg1 *store.UpdateDataRequestModel) (*store.UpdateDataResponseModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateData", arg0, arg1)
	ret0, _ := ret[0].(*store.UpdateDataResponseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateData indicates an expected call of UpdateData.
func (mr *MockStoragerMockRecorder) UpdateData(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateData", reflect.TypeOf((*MockStorager)(nil).UpdateData), arg0, arg1)
}
